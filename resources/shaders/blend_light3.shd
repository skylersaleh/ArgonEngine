//
//  Shader.vsh
//  NeonRush
//
//  Created by Skyler Saleh on 4/23/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

varying mediump vec2 tex_coord;
varying mediump vec4 light_color;
uniform mediump vec3 camera_pos;
uniform mediump mat4 camera_inverse;
uniform float smoothness;
uniform float metalness;
uniform float transparency;

varying mediump vec4 light_pos;
varying mediump vec2 screen_pos;

#ifdef VERTEX_SHADER
attribute mediump vec3 position;
attribute mediump vec4 center;
attribute mediump vec4 color;

void main()
{
    
    gl_Position= vec4(position,1.);
    tex_coord=position.xy*0.5+0.5;
    light_color=color;
    light_pos = center;
    screen_pos = position.xy;
    
    // Compute the light direction
    
}
#endif
#ifdef FRAGMENT_SHADER
uniform sampler2D data1;
uniform sampler2D data2;
uniform sampler2D data3;

uniform sampler2D depth;

float fresnel(float x){
    float kf = 1.12;
    float ikf = 1.-kf;
    float xkf =x-kf;
    
    float numerator = 1./(xkf*xkf)-1.0/(kf*kf);
    float denom = 1./(ikf*ikf)-1.0/(kf*kf);
    return numerator/denom;
}
float shadow(float x){
    float ks = 1.01;
    float iks = 1.-ks;
    float xks =x-ks;
    
    float numerator = 1./(iks*iks)-1.0/(xks*xks);
    float denom = 1./(iks*iks)-1.0/(ks*ks);
    return numerator/denom;
}

void main()
{
    
    
    float k = 0.1;
    
    vec4 d1 = texture2D(data1,tex_coord);
    vec4 d2 = texture2D(data2,tex_coord);
    vec4 d3 = texture2D(data3,tex_coord);

    vec4 d_val = texture2D(depth,tex_coord);
    
    vec3 normal = normalize(d1.xyz);
    vec3 world_pos = d3.xyz;
    vec3 color = d2.xyz;
    vec3 view = normalize(camera_pos-world_pos);
    
    mediump vec3 dir = light_pos.xyz-world_pos;
    mediump float dis = length(dir);
    mediump float falloff = 1.0+ dis/light_pos.w;
    mediump float att = light_color.w/(falloff*falloff);
    
    
    vec3 n = normal;
    vec3 l = normalize(dir);
    vec3 v = normalize(view);
    vec3 h = normalize(l+v);
    
    float NdotL= dot(n,l);
    float NdotV= dot(n,v);
    float HdotV= dot(h,v);
    float fNdotL=fresnel(NdotL);
    float s_cubed = smoothness*smoothness*smoothness;
    
    float d = (1.0-metalness*smoothness);
    float Rd = (1.0-s_cubed)*(1.0-transparency);
    
    vec3 diffuse = NdotL*d*Rd*color*light_color.rgb;
    
    float r = (1.0-transparency)-Rd;
    
    float j = fNdotL*shadow(NdotL)*shadow(NdotV);
    float reflected = min(1.0,r+j*(r+k));
    
    vec3 Cl = light_color;
    vec3 Cs = Cl+metalness*(1.0-fNdotL)*(color-Cl);
    
    vec3 specular = Cs*reflected*pow(-HdotV,3.0f/(1.0f-smoothness));
    
    
    
    
    gl_FragData[0].rgb = (max(diffuse,0.)+max(specular,0.0));
    //gl_FragData[0].rgb = normal;

    gl_FragData[0].a = 1.0;
}
#endif