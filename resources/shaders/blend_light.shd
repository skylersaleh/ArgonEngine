//
//  Shader.vsh
//  NeonRush
//
//  Created by Skyler Saleh on 4/23/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

varying mediump vec2 tex_coord;
varying mediump vec4 light_color;
uniform mediump vec3 camera_pos;
uniform mediump mat4 camera_inverse;
uniform float smoothness;
uniform float metalness;
uniform float transparency;

varying mediump vec4 light_pos;
varying mediump vec2 screen_pos;

#ifdef VERTEX_SHADER
attribute mediump vec3 position;
attribute mediump vec4 center;
attribute mediump vec4 color;

void main()
{
    
    gl_Position= vec4(position,1.);
    tex_coord=position.xy*0.5+0.5;
    light_color=color;
    light_pos = center;
    screen_pos = position.xy;
    
    // Compute the light direction
    
}
#endif
#ifdef FRAGMENT_SHADER
uniform sampler2D data1;
uniform sampler2D data2;
uniform sampler2D data3;

uniform sampler2D depth;



void main()
{
    
    float ref_incidence = transparency+1.0;
    float roughness_value = metalness+1.0;
    
    
    vec4 d1 = texture2D(data1,tex_coord);
    vec4 d2 = texture2D(data2,tex_coord);

    vec4 d_val = texture2D(depth,tex_coord);
    
    vec3 normal = normalize(d1.xyz);
    float w = d1.w/d_val.r;
    vec3 eye_pos =vec3(screen_pos.xy*w,d1.w);
    
    vec3 color = d2.xyz;
    vec3 view = normalize(vec3(0.,0.,1.)-eye_pos);
    
    mediump vec3 dir = light_pos.xyz-eye_pos;
    mediump float dis = length(dir);
    dir /=dis;
    
    mediump float falloff = 1.0+ dis/light_pos.w;
    mediump float att = light_color.w/(falloff*falloff);
    
    vec3 half_vector = normalize(view+dir);
    
    float NdotL= clamp(dot(normal,dir),0.00001,1.);
    float NdotH= clamp(dot(normal,half_vector),0.00001,1.);
    float NdotV= clamp(dot(normal,view),0.00001,1.);
    float VdotH= clamp(dot(view,half_vector),0.00001,1.);
    float NdotH2 = NdotH*NdotH;

    float r_sq = roughness_value*roughness_value;
    
    float geo_fact = NdotH/VdotH;
    
    float geo = min(0.5,min(NdotV,NdotL)*geo_fact);
    
//Beckmann
    float roughness_a = 1.0 / ( 2.0 * r_sq * NdotH2*NdotH2 );
    float roughness_b = NdotH2- 1.0;
    float roughness_c = r_sq * NdotH2;
    float roughness = roughness_a * exp( roughness_b / roughness_c );
    
    float fresnel = mix(pow( 1.0 - VdotH, 5.0),1.,ref_incidence);
    //float fresnel = pow( 1.0 - VdotH, 5.0);
    //fresnel *= ( 1.0 - ref_incidence );
    //fresnel += ref_incidence;
    
    
    float Rs  = ( fresnel * geo * roughness )/NdotV;
    
    vec3 final = NdotL*color+Rs;

    gl_FragData[0].rgb = (final+color*NdotL*0.1+color*0.2)*att*light_color.rgb;
    //gl_FragData[0].rgb = color.rgb;
    gl_FragData[0].a = 1.0;
}
#endif