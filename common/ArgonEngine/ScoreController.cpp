//Generated by the Argon Build System

//
//  ARScoreController.cpp
//  Neon Rush 2
//
//  Created by Skyler Saleh on 8/7/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#include "ScoreController.h"
#include <cstdio>
#include "Reflection.h"
#include <algorithm>
namespace Argon {
    bool     ScoreController::displayAchievments = false;
    bool     ScoreController::displayLeaderboard = false;
    bool     ScoreController::updateGlobalRankings = true;
    uint64_t ScoreController::total_global_scores;

    std::map<StringIntern,  double> ScoreController::achievements;
    std::map<StringIntern, ScoreControllerScore> ScoreController::global_rankings;

    std::vector<ScoreControllerAchievement> ScoreController::unsubmitted_achievements;
    std::vector<ScoreControllerScore>      ScoreController::scores;
    std::vector<ScoreControllerScore>      ScoreController::unsubmitted_scores;
    void ScoreController::submit_score(double points, const StringIntern& board){
        ScoreControllerScore s;
        s.score = points;
        s.leader_board = board;
        scores.push_back(s);
        std::stable_sort(scores.begin(), scores.end());
        std::vector<ScoreControllerScore>::iterator it = unique (scores.begin(), scores.end());
        scores.resize(it - scores.begin());
        unsubmitted_scores.push_back(s);
    }
    void ScoreController::load_score(double points, const StringIntern& board){
        ScoreControllerScore s;
        s.score = points;
        s.leader_board = board;
        scores.push_back(s);
        std::stable_sort(scores.begin(), scores.end());
        std::vector<ScoreControllerScore>::iterator it = unique (scores.begin(), scores.end());
        scores.resize(it - scores.begin());
    }
    void ScoreController::update_achievement(const StringIntern &str,double percent){
        double v = achievements[str];
        if(v>=percent) return;
        achievements[str] = percent;
        ScoreControllerAchievement a;
        a.achievement = str;
        a.percent = percent;
        unsubmitted_achievements.push_back(a);
    }
    void ScoreController::clear_unsubmitted_scores(){
        unsubmitted_scores.clear();
        ScoreController s;
        s.save_scores();
    }
    void ScoreController::clear_unsubmitted_achievements(){
        unsubmitted_achievements.clear();
        ScoreController s;
        s.save_scores();
    }
    void ScoreController::save_scores(){
        write("data://scores.ahf");
    }
    void ScoreController::reload(){
        read("data://scores.ahf");
        std::stable_sort(scores.begin(), scores.end());
        std::vector<ScoreControllerScore>::iterator it = unique (scores.begin(), scores.end());
        scores.resize(it - scores.begin());

    }
    double ScoreController::get_top_local_score(const StringIntern &s){
        for (size_t x=0; x<scores.size(); ++x) {
            if (scores[x].leader_board==s)return scores[x].score;
        }
        return 0;
    }
    MAKE_VISIT_IMPL(ScoreController, {
                             ADD_VAR2(unsubmitted_achievements, "unsubmitted achievements");
                             ADD_VAR2(unsubmitted_scores,       "unsubmitted scores");
                             ADD_VAR(scores);
                         });
    MAKE_VISIT_IMPL(ScoreControllerAchievement, {
                             ADD_VAR(achievement);
                             ADD_VAR(percent);
                         });
    MAKE_VISIT_IMPL(ScoreControllerScore, {
                             ADD_VAR(score);
                             ADD_VAR2(leader_board,"leader board");
                         });

};
