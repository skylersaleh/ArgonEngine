//Generated by the Argon Build System

//
//  Quaternion2.h
//  ArgonEngine
//
//  Created by Skyler Saleh on 9/30/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#ifndef ArgonEngine_Quaternion2_h
#define ArgonEngine_Quaternion2_h
#include "Matrix.h"
#include "Vector.h"
namespace Argon {
    typedef Eigen::Quaternionf Quaternionf;
    typedef Eigen::Quaterniond Quaterniond;


    template<typename T>
    INLINE Quaternion<T> get_rotation(MatrixBase<T, 4>&m){
        VectorBase<T,3> scale_val = get_scale(m);
        float xr = atan2f(m(2,1)/scale_val[2], m(2,2)/scale_val[2]);
        float yr = -asin(m(2,0)/scale_val[2]);
        float zr = atan2f(m(1,0)/scale_val[1], m(0,0)/scale_val[0]);
       Quaternionf q= AngleAxisf(xr, Vector3f::UnitZ())
          * AngleAxisf(yr, Vector3f::UnitY())
          * AngleAxisf(zr, Vector3f::UnitZ());




        return q.normalized();
    }
    template <typename T,size_t s1 >
    struct TypeInfo<Quaternion<T,s1> >{
        enum {valid=1};
        static void handle(Quaternion<T,s1> &t, Visitor & v){
            v.type_name="Quaternion";

            for(size_t y=0;y<4;++y){
                v.handle(t.coeffs()[y]);
            }
        }

    };

};

#endif
