//Generated by the Argon Build System

//
//  RenderSystemConstants.cpp
//  ArgonEngine
//
//  Created by Skyler Saleh on 10/12/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#include "RenderSystemConstants.h"
namespace Argon{
    const StringIntern kColorAttribute = "ColorAttribute";
    const StringIntern kTextureAttribute = "TextureCoordAttribute";
    const StringIntern kNormalAttribute = "NormalAttribute";
    const StringIntern kPositionAttribute = "PositionAttribute";
    const StringIntern kIndexAttribute = "IndexAttribute";
    const StringIntern kMatrixAttribute = "MatrixAttribute";

    void tex_set_color(unsigned char *data, unsigned int format, Vector4f color, int x, int y, int w, int h){
        if(x>=w)x=w-1;
        if(y>=h)y=h-1;

        unsigned char r = std::max(std::min(color[0]*255.f,255.f),0.f);
        unsigned char g = std::max(std::min(color[1]*255.f,255.f),0.f);
        unsigned char b = std::max(std::min(color[2]*255.f,255.f),0.f);
        unsigned char a = std::max(std::min(color[3]*255.f,255.f),0.f);
        data+=get_tex_format_pixel_size(format)*(x+y*w);

        switch(format&0xf){
        case kTextureRGB565:
            //RRRR RGGG GGGB BBBB
            data[1]= r&0xF8;
            data[1]|=(g>>5)&0x07;
            data[0]= (g<<3)&0xE0;
            data[0]|=(b>>3)&0x1F;

            break;
        case kTextureRGBA8:
            data[3]=a;
        case kTextureRGB8:
            data[2]=b;
            data[1]=g;
            data[0]=r;
            break;

        case kTextureRGBAF16:
        case kTextureRGBAF32:
            ((float*)data)[3]=color[3];
        case kTextureRGBF16:
        case kTextureRGBF32:
            ((float*)data)[2]=color[2];
            ((float*)data)[1]=color[1];
            ((float*)data)[0]=color[0];
            break;

        case kTextureRGBAF64:
            ((double*)data)[3]=color[3];
        case kTextureRGBF64:
            ((double*)data)[2]=color[2];
            ((double*)data)[1]=color[1];
            ((double*)data)[0]=color[0];
            break;


        case kTextureRGBA5551:
            //RRRR RGGG GGBB BBBA
            data[1]= r&0xF8;
            data[1]|=(g>>5)&0x07;
            data[0]= (g<<3)&0xC0;
            data[0]|=(b>>2)&0x3E;
            data[0]|=color[3]>0.5f?0x1:0;

            break;
        case kTextureRGBA4:
            //RRRR GGGG BBBB AAAA
            data[1]= r&0xF0;
            data[1]|=(g>>4)&0x0F;
            data[0]= b&0xF0;
            data[0]|=(a>>4)&0x0F;
            break;
        }
    }

    Vector4f tex_lookup_color(unsigned char *data, unsigned int format, int x, int y, int w, int h){
        if(x>=w)x=w-1;
        if(y>=h)y=h-1;

        data+=get_tex_format_pixel_size(format)*(x+y*w);
        Vector4f color;
        switch(format&0xf){
        case kTextureRGB565:
            //RRRR RGGG GGGB BBBB
            color[0]= ((data[1]>>3)&0x1F)/31.;
            color[1]= (((data[1]&0x7)<<3)|(data[0]>>5))/63.;
            color[2]= (data[0]&0x1F)/31.;
            break;
        case kTextureRGBA8:
            color[3]=data[3]/255.f;
        case kTextureRGB8:
            color[2]=data[2]/255.f;
            color[1]=data[1]/255.f;
            color[0]=data[0]/255.f;
            break;

        case kTextureRGBAF16:
        case kTextureRGBAF32:
            color[3]=((float*)data)[3];
        case kTextureRGBF16:
        case kTextureRGBF32:
            color[2]=((float*)data)[2];
            color[1]=((float*)data)[1];
            color[0]=((float*)data)[0];
            break;

        case kTextureRGBAF64:
            color[3]=((double*)data)[3];
        case kTextureRGBF64:
            color[2]=((double*)data)[2];
            color[1]=((double*)data)[1];
            color[0]=((double*)data)[0];
            break;


        case kTextureRGBA5551:
            //RRRR RGGG GGBB BBBA
            color[0]= (data[1]>>3)/31.;
            color[1]= (((data[1]&0x7)<<2)|data[0]>>6)/31.;
            color[2]= ((data[0]>>1)&0x1F)/31.;
            color[3]=data[0]&0x1;

            break;
        case kTextureRGBA4:
            //RRRR GGGG BBBB AAAA
            color[0]= (data[1]>>4)/15.;
            color[1]= (data[1]&0xF)/15.;
            color[2]= (data[0]>>4)/15.;
            color[3]=(data[0]&0xF)/15.;
            break;
        }
        return color;
    }

    double texture_format_fitness(unsigned int tex_form1, unsigned int tex_form2){

        float f = 0;
        float f2 = (tex_form1&kTextureFormatMask)-(tex_form2&kTextureFormatMask);
        if(f2>0.)f2*=-0.5f;
        f+=f2;
        f2 =(tex_form1&kTextureAnsiotropicMask)-(tex_form2&kTextureAnsiotropicMask)/float(kTextureAnsiotropic2x);
        if(f2>0.)f2*=-0.25;
        f+=f2;

        f-=((tex_form1&(~tex_form2))&kTextureFlagMask)*10.;

        return f;

    }



};


