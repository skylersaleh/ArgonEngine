//Generated by the Argon Build System

//
//  ARUtility.cpp
//  NeonRush
//
//  Created by Skyler Saleh on 4/25/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#include "Utility.h"
#include <iostream>
namespace Argon{
#if USE_STRINGINTERN && !USE_STACKSTRING
void StringIntern::set(const char* s, size_t size){
    bool has_lock = false;
    TrieNode** curr= & root();
    TrieNode* last=NULL;
    size_t i = 0;
    while(i<size){
        if(*curr){
            char let = (*curr)->letter;
            if(s[i]<let)curr= &(*curr)->less;
            else if(s[i]>let)curr= &(*curr)->greater;
            else{
                last=*curr;
                curr= &(*curr)->equal;
                ++i;
            }
        }else{
            if(has_lock){
                *curr = new TrieNode(s[i],last);
                ++i;
                last=*curr;
                curr=&last->equal;

            }else{
                create_m().lock();
                has_lock=true;
            }
        }
    }
    data=last;
    if(has_lock)create_m().unlock();
}


std::string StringIntern::str()const{
    std::string s;
    TrieNode* p = data;
    size_t size=0;
    while(p){
        p=p->parent;
        ++size;
    }
    s.resize(size);
    p=data;
    while(p){
        s[--size]=p->letter;
        p=p->parent;

    }
    return s;
}
void StringIntern::print(StringIntern::TrieNode* s,const std::string &partial,int indent){

    if(s){
        std::string p = partial+s->letter;
        print(s->less,partial,indent);
        for(int i=0;i<indent;++i)std::cout<<" ";
        std::cout<<p<<"\n";
        print(s->equal,p,indent+2);
        print(s->greater,partial,indent);

    }
}
#endif
};
