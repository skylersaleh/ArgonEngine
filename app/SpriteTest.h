//Generated by the Argon Build System

//
//  EpicEclipticBase.h
//  Epic Ecliptic
//
//  Created by Skyler Saleh on 8/30/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#ifndef __SPRITE_TEST__
#define __SPRITE_TEST__

#include <ArgonEngine/MeshFormat.h>
#include <ArgonEngine/Node.h>
#include <ArgonEngine/Hardware.h>
#include <ArgonEngine/Sprite.h>
#include <iostream>
#include "StreamedTexture.h"

struct SpriteTest : public Argon::Node {
    Argon::Sprite sprite;
    Argon::InstancedSprites sprites;
    Argon::Input input;
    Argon::ParticleSystem system;

    float total_time=0;
    SpriteTest(){
        name="SpriteTest";
        sprite.texture="resource://test.png{f=RGBA4;}";
        sprite.material->blend =Argon::kBlendScreen;
        sprite.dimensions=Vector3f(1,1.,0.);
        int particles =100000;
        sprites.set_sprites(particles);

        sprites.texture="resource://test.png{f=RGBA4;}";

        system.particles.resize(particles);
        system.variance.color=Argon::kBlackColor;
        system.variance.color_v=Vector4f(0,0,0,0);
        system.variance.rotation_axis.setConstant(10);
        system.variance.angular_velocity=2.5;
        system.variance.position=Vector3f(0,0,0);
        system.variance.scale_v=0.001;
        system.emission_rate = particles/3.;

        system.initial.scale=0.001;
        system.initial.color.setConstant(1);
        system.initial.velocity=Vector3f(1.5,1.5,-10);
        system.initial.position=Vector3f(0.,0.,10);

        system.variance.velocity.setConstant(5);


    }
    std::shared_ptr<Node> animate(float dt){
        size_t i =0;
        system.animate(dt*0.1);

        for(auto& p :system.particles){

            sprites.set_sprite(i++,p.color,Argon::Vector3f(p.scale,p.scale,p.scale),p.position,Argon::Quaternionf(AngleAxisf(p.angle,p.rotation_axis)));
        }

        sprite.rotation=Quaternionf(AngleAxisf(0,Vector3f::UnitX())*
                AngleAxisf(total_time,Vector3f::UnitY())*
                AngleAxisf(total_time*0.2,Vector3f::UnitZ()));
        return input[' '].value?std::make_shared<StreamTextureTest>():nullptr;
    }

};
#endif
