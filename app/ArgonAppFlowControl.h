//Generated by the Argon Build System

//
//  NeonRushFlowControl.h
//  Neon Rush
//
//  Created by Skyler Saleh on 6/23/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#ifndef Neon_Rush_NeonRushFlowControl_h
#define Neon_Rush_NeonRushFlowControl_h
#include "ArgonEngine/Thread.h"
#include "ArgonAppBase.h"
#include "ArgonEngine/Hardware.h"
#include "ArgonEngine/OpenGLES.h"
#include <ArgonEngine/ForwardRenderer.h>
#include "DeferredRenderer.h"
#include "FontTest.h"
#include "StreamedTexture2.h"
#include <ArgonEngine/AudioSystem.h>
#include "ExplodingTeapots.h"
#include <ArgonEngine/Text.h>
#include <sstream>

class ArgonAppFlowControl {
private:
    Argon::Timer t;
    std::shared_ptr<Argon::Node> current_node;
    Argon::Camera camera;
    Argon::Camera ui_camera;
    Argon::Input input;
    Argon::Mutex m;
    bool new_d;
    Argon::Quaternionf q;

    Argon::Quaternionf rot_q;
    Argon::Vector2f rot;

    Argon::Vector3f smoothed_perspective;
    Argon::Matrix4f view_matrix;
    float smoothed_time;
    Argon::Matrix4f trans_matrix;
    Argon::ForwardRenderer render;
    std::shared_ptr<Argon::Listener> left_playback;
    std::shared_ptr<Argon::Listener> right_playback;
    std::shared_ptr<Argon::OggNode> opus;
    std::shared_ptr<Argon::PeakDetector> peak1=std::make_shared<Argon::PeakDetector>();
    std::shared_ptr<Argon::PeakDetector> peak2=std::make_shared<Argon::PeakDetector>();

    Argon::AudioSource3D left_source,right_source;
    Argon::Label fps;
    Argon::Label test_name;
    Argon::Vector3f translate;
    Argon::Quaternionf accum_rot;
    Argon::Matrix4f transform_matrix;
    Argon::VirtualResource font;
public:
    ArgonAppFlowControl(){
        transform_matrix=Argon::IdentityMatrix<float>()* Argon::TranslateMatrix(Argon::Vector3f(0,0,-10));
        left_playback = std::make_shared<Argon::Listener>();
        right_playback = std::make_shared<Argon::Listener>();
        opus = std::make_shared<Argon::OggNode>();
        font= "resource://GeosansLight.ttf";
        fps.layer=10;
        test_name.layer=10;
        current_node=std::make_shared<ArgonAppBase>();

        left_playback->volume = right_playback->volume=1.0;
        right_playback->direction_factor=left_playback->direction_factor=0.2;

        left_playback->direction = Argon::normalize(Argon::normalize(Argon::Vector3f(-1.0,0.3,0.0)));
        right_playback->direction = Argon::normalize(Argon::normalize(Argon::Vector3f(1.0,0.3,0.0)));
        opus->init_opus("resource://within-time.ogg");
        left_playback->position[0]= -0.5;
        right_playback->position[0]=0.5;
        left_source.input =opus->left;
        right_source.input=opus->right;
        peak1->input=left_playback;
        peak2->input=right_playback;
        Argon::AudioNode::root_nodes[0]=peak1;
        Argon::AudioNode::root_nodes[1]=peak2;
       // Argon::AudioNode::root_nodes[0]=opus->left;
        //Argon::AudioNode::root_nodes[1]=opus->right;
    }
    void animate();
    void set_node(std::shared_ptr<Argon::Node> node){

        if(node)current_node=node;
    }
    bool draw(){
        static Argon::OpenGLES render_api;
        render.viewport=Argon::Screen::size;
        animate();
        if(input[' '])opus->playback_position=0.95;

        auto i = input.get_last_update();
       // std::cout<<"Last update: "<<input.get_full_input_string(i.input_id)<<" @ "<<i.time<<std::endl;
        render.draw(render_api);
        return true;
    }

};

#endif
