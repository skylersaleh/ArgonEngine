//Generated by the Argon Build System

//
//  EpicEclipticBase.h
//  Epic Ecliptic
//
//  Created by Skyler Saleh on 8/30/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#ifndef __RAY_TRIANGLE_TEST__
#define __RAY_TRIANGLE_TEST__

#include "ArgonEngine/MeshFormat.h"
#include "ArgonEngine/Node.h"
#include "ArgonEngine/Hardware.h"
#include <ArgonEngine/Utility.h>
#include <ArgonEngine/Collision.h>
#include <ArgonEngine/Sprite.h>
#include <iostream>
#include "ShipTest.h"

struct RayTriangleTest : public Argon::Node {
    Argon::Sprite sprite;
    Argon::Input input;
    Argon::VirtualResourceImage*image;
    int resolution;
    RayTriangleTest(){
        name="RayTriangleTest";
        resolution=100;
        sprite.texture ="virtual://raytri/render_image1.tex{w=h=100; f=RGBA8; mip=0; filter=0;}";
        image = sprite.texture.get_data<Argon::VirtualResourceImage*>();
        sprite.dimensions=Vector3f(20,20.,20.);

        for(int i=0;i<resolution*resolution*4;i+=4)
            image->set_pixel_color(i%resolution, i/resolution, Argon::kBlackColor);

    }

    std::shared_ptr<Node> animate(float dt){
        //Create the three vertices
        Argon::Vector3f v1(1.0+input['1'].integral-input['2'].integral,
                    input['3'].integral-input['4'].integral,
                    input['5'].integral-input['6'].integral);

        Argon::Vector3f v2(input['q'].integral-input['w'].integral,
                    input['e'].integral-input['r'].integral+1.0,
                    input['t'].integral-input['y'].integral);

        Argon::Vector3f v3(input['a'].integral-input['s'].integral,
                    input['d'].integral-input['f'].integral-1.0,
                    input['g'].integral-input['h'].integral);
        //Raycast
        for(int x = 0; x<resolution;++x){
            for(int y=0;y<resolution;++y){
                Argon::Vector3f position(x/float(0.5*resolution)-1.,y/float(0.5*resolution)-1.,2.0);
                Argon::Vector3f dir(0,0,-1.0);
                bool b=Argon::ray_intersects_triangle(v1, v2, v3, position, dir);
                image->set_pixel_color(x, y, b?Argon::kRedColor:Argon::kBlackColor);
            }
        }
        //Update the image
        image->update_id_++;


        return input[' '].value?std::make_shared<ShipTest>():nullptr;
    }

};
#endif
