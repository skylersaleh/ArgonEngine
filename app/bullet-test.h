//Generated by the Argon Build System

//
//  EpicEclipticBase.h
//  Epic Ecliptic
//
//  Created by Skyler Saleh on 8/30/12.
//  Copyright (c) 2012 Argon Software. All rights reserved.
//

#ifndef __BULLET_TEST__
#define __BULLET_TEST__

#include "ArgonEngine/MeshFormat.h"
#include "ArgonEngine/Node.h"
#include "ArgonEngine/Hardware.h"
#include <ArgonEngine/Sprite.h>
#include <iostream>
#include "DevConsole.h"
#include <btBulletDynamicsCommon.h>
#include <btBulletCollisionCommon.h>


struct BulletTest : public Argon::Node {
    Argon::MeshFormat model;
    Argon::Input input;
    btDbvtBroadphase broadphase;
    btDefaultCollisionConfiguration collisionConfiguration;
    btCollisionDispatcher* dispatcher;
    btSequentialImpulseConstraintSolver* solver;
    btDiscreteDynamicsWorld* dynamicsWorld;

    //Ground
    btDefaultMotionState* groundMotionState;
    btRigidBody* groundRigidBody;
    btCollisionShape* groundShape;

    //Ball
    btDefaultMotionState* ballMotionState;
    btRigidBody* ballRigidBody;
    btCollisionShape* ballShape;

    std::shared_ptr<Node> ball;

    BulletTest(){
        name="BulletTest";
        model.load_file("resource://ball.ahf");
        model.create_objects();
        dispatcher = new btCollisionDispatcher(&collisionConfiguration);
        solver = new btSequentialImpulseConstraintSolver;
        dynamicsWorld = new btDiscreteDynamicsWorld(dispatcher,&broadphase,solver,&collisionConfiguration);
        dynamicsWorld->setGravity(btVector3(0,0,-10));

        groundShape = new btStaticPlaneShape(btVector3(0,0.5,0.5),1);
        ballShape = new btSphereShape(1);

        groundMotionState = new btDefaultMotionState(btTransform(btQuaternion(0,0,0,1),btVector3(0,0,-1)));
        btRigidBody::btRigidBodyConstructionInfo
        groundRigidBodyCI(0,groundMotionState,groundShape,btVector3(0,0,0));
        groundRigidBodyCI.m_restitution= 0.8;


        groundRigidBody = new btRigidBody(groundRigidBodyCI);
        dynamicsWorld->addRigidBody(groundRigidBody);

        ballMotionState =
        new btDefaultMotionState(btTransform(btQuaternion(0,0,0,1),btVector3(0,0,50)));
        btScalar mass = 1;
        btVector3 ballInertia(0,0,0);
        ballShape->calculateLocalInertia(mass,ballInertia);
        btRigidBody::btRigidBodyConstructionInfo ballRigidBodyCI(mass,ballMotionState,ballShape,ballInertia);
        ballRigidBodyCI.m_restitution= 0.8;
        ballRigidBody = new btRigidBody(ballRigidBodyCI);
        dynamicsWorld->addRigidBody(ballRigidBody);

        ball=model.spawned_nodes["Sphere"];



    }
    ~BulletTest(){
        dynamicsWorld->removeRigidBody(ballRigidBody);
        dynamicsWorld->removeRigidBody(groundRigidBody);

        delete ballShape;
        delete ballRigidBody;
        delete ballMotionState;
        delete groundMotionState;
        delete groundRigidBody;
        delete groundShape;
        delete dynamicsWorld;
        delete dispatcher;
        delete solver;


    }
    std::shared_ptr<Node> animate(float time){
        dynamicsWorld->stepSimulation(time,10);

        btTransform trans;
        ballRigidBody->getMotionState()->getWorldTransform(trans);
        ball->position=Vector3f(trans.getOrigin().getX(),
                          trans.getOrigin().getY(),
                          trans.getOrigin().getZ());


        return input[' '].value?std::make_shared<DevConsoleTest>():nullptr;
    }

};
#endif
