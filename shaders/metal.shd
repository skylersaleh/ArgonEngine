//
//  Shader.vsh
//  NeonRush
//
//  Created by Skyler Saleh on 4/23/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

uniform mediump vec4 specular;
uniform mediump vec4 color;

varying mediump vec3 ambient;
varying mediump vec3 normal;
varying mediump vec3 normal2;

varying mediump vec4 ecPos;
varying mediump vec4 screen_pos;


#ifdef VERTEX_SHADER
attribute mediump vec3 PositionAttribute;
attribute mediump vec3 NormalAttribute;
void main()
{
    ecPos =matrix * vec4(PositionAttribute,1.);
    
    // Compute the light direction
    
   screen_pos=projection_matrix*(view_matrix*ecPos);
   gl_Position=screen_pos;
#ifndef DEPTH_ONLY
    ambient = vec3(0.2,0.1,0.05)*color.xyz;
    //normal=(mat3(normal_matrix)*NormalAttribute);
    normal2=(mat3(view_matrix*normal_matrix)*NormalAttribute);
    normal=(mat3(normal_matrix)*NormalAttribute);

#endif
}
#endif
#ifdef FRAGMENT_SHADER

uniform sampler2D texture;

void main()
{
    vec3 origin = gl_FragCoord.xyz/vec3(viewport,1.);
#ifndef DEPTH_ONLY
    vec3 pos = ecPos.xyz/ecPos.w;

    const mediump vec4 specular_exponent= vec4(1000);
    mediump vec3 n =normalize(normal);
    mediump vec3 n2 = normalize(normal2);
    mediump vec3 view = normalize(camera_pos-pos);

    mediump vec3 spec_color = vec3(1.);
    
    vec3 att_accum = vec3(0.);
    vec3 c=calculate_lighting_blinn_phong(pos,n,view,ambient,vec3(1.),color.rgb, 100. );

    c+=pow(texture2D(texture,(n2.xy)*0.3+0.5).xyz,vec3(4.))*0.25;
    gl_FragColor = vec4(c,1.);

    
#endif
#ifdef DEPTH_ONLY
    gl_FragColor=vec4(0.,0.,0.,origin.z);
#endif
}
#endif