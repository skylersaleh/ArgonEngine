//
//  Shader.vsh
//  NeonRush
//
//  Created by Skyler Saleh on 4/23/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//


uniform mediump mat4 matrix;
uniform mediump mat4 view_matrix;
uniform mediump mat4 projection_matrix;
uniform mediump mat4 normal_matrix;

uniform mediump vec4 light_positions[32];
uniform mediump vec4 light_colors[32];

uniform mediump int total_lights;
uniform mediump float time;
uniform mediump vec3 camera_pos;
uniform mediump vec2 viewport;
uniform sampler2D ssao_depth;
uniform sampler2D ssao_color;

uniform sampler2D noise_texture;


vec4 fresnel(vec4 x){
    float kf = 1.12;
    float ikf = 1.-kf;
    vec4 xkf =x-kf;

    vec4 numerator = 1./(xkf*xkf)-1.0/(kf*kf);
    float denom = 1./(ikf*ikf)-1.0/(kf*kf);
    return numerator/denom;
}
vec4 shadow(vec4 x){
    float ks = 1.01;
    float iks = 1.-ks;
    vec4 xks =x-ks;

    vec4 numerator = 1./(iks*iks)-1.0/(xks*xks);
    float denom = 1./(iks*iks)-1.0/(ks*ks);
    return numerator/denom;
}
float shadow_float(float x){
    float ks = 1.01;
    float iks = 1.-ks;
    float xks =x-ks;

    float numerator = 1./(iks*iks)-1.0/(xks*xks);
    float denom = 1./(iks*iks)-1.0/(ks*ks);
    return numerator/denom;
}
vec3 hsv_to_rgb(vec3 hsv){


    float v = hsv[2];
    hsv[0]=fract(hsv[0]);
    float i = floor(hsv[0] * 6.);
    float f = hsv[0] * 6. - i;
    float p = hsv[2] * (1 - hsv[1]);
    float q = hsv[2] * (1 - hsv[1] * f);
    float t = hsv[2] * (1 - hsv[1] * (1. - f));

    if(i==0.)return vec3(v,t,p);
    else if(i==1) return vec3(q,v,p);
    else if(i==2) return vec3(p,v,t);
    else if(i==3) return vec3(p,q,v);
    else if(i==4) return vec3(t,p,v);

    return vec3(v,p,q);

}
/*vec3 light_strauss(vec3 color, vec3 specular,mat4x3 light_color vec3 normal, vec3 view, mat4x3 light,vec4 attenuation){
 const float k = 0.1f;

 vec3 n = normal;
 vec3 l = normalize(-light);
 vec3 v = normalize(view);
 mat4x3 half_v = mat4x3(
 normalize(light[0]+view),
 normalize(light[1]+view),
 normalize(light[2]+view),
 normalize(light[3]+view)
 );

 vec4 NdotL= -normal*light;
 float NdotV= dot(n,v);
 vec4 HdotV= view*half_v;
 vec4 fNdotL=fresnel(NdotL);

 float s_cubed = smoothness*smoothness*smoothness;
 float d = (1.0-metalness*smoothness);
 float Rd = (1.0-s_cubed)*(1.0-transparency);
 float r = (1.0-transparency)-Rd;

 float j = fNdotL*shadow(NdotL)*shadow(NdotV);
 float reflected = min(1.0,r+j*(r+k));

 vec3 Cl = light_color*attenuation;
 vec3 Cs = Cl+metalness*(1.0-fNdotL)*(color-Cl);


 vec3 diffuse = NdotL*d*Rd*color*light_color;
 vec3 spec = specular*reflected*pow(-HdotV,3.0f/(1.0f-smoothness));




 return ((max(diffuse,0.)+max(spec,0.0)))*light_color;

 }*/



vec4 oren_nayer_diffuse(vec3 normal, vec3 view, mat4x3 light, float roughness){

    //Constant
    float rough_sq = roughness*roughness;
    float A = 1.0 - 0.5 * (rough_sq / (rough_sq + 0.57));
    float B = 0.45 * (rough_sq / (rough_sq + 0.09));



    float vdotn = dot(view,normal);
    float view_normal_angle = acos(vdotn);

    vec4 ldotn = normal*light;
    vec4 light_normal_angle = acos(ldotn);


    vec3 gamma1 = view-normal*vdotn;



    mat4x3 gamma2 = light - mat4x3(normal*ldotn[0],normal*ldotn[1],normal*ldotn[2],normal*ldotn[3]);
    // Compute the other aliases
    vec4 gamma   = gamma1*gamma2;



    vec4 alpha = max( vec4(view_normal_angle), light_normal_angle );
    vec4 beta  = min( vec4(view_normal_angle), light_normal_angle );

    vec4 C = sin(alpha) * tan(beta);


    vec4 final = (A + B * max( vec4(0.0), gamma ) * C);

    return max( vec4(0.0), ldotn ) * final;

}


vec4 packed_length(in mat4x3 vecs){
    return vec4(length(vecs[0]),length(vecs[1]),length(vecs[2]),length(vecs[3]));
}
mat4x3 packed_divide(in mat4x3 vecs, in vec4 dividend){
    return mat4x3(vecs[0]/dividend[0],
                  vecs[1]/dividend[1],
                  vecs[2]/dividend[2],
                  vecs[3]/dividend[3]);
}
mat4x3 half_vector(in mat4x3 light, in vec3 view_dir){
    return mat4x3(
                  normalize(light[0]+view_dir),
                  normalize(light[1]+view_dir),
                  normalize(light[2]+view_dir),
                  normalize(light[3]+view_dir)

                  );
}

vec3 blinn_phong(in vec3 color, in vec3 specular, in vec4 specular_exponent, in mat4x3 light_color, in vec4 NdotL, in vec4 NdotH, in vec4 attenuation){
    vec4 diffuse_strength =clamp(NdotL*attenuation,0.,1.);
    vec4 specular_strength =pow(clamp(NdotH,0.,1.),specular_exponent)*attenuation;

    return (light_color*diffuse_strength)*color+(light_color*specular_strength)*specular;
}
vec4 attenuation_point(in vec4 light_distance, in vec4 light_radius, in vec4 light_power){
    vec4 denom = 1.0+light_distance/light_radius;
    return light_power/(denom*denom);
}

vec3 calculate_lighting_blinn_phong(vec3 world_pos, vec3 n, vec3 view,vec3 ambient_color,vec3 spec_color,vec3 color, float spec_exponent )
{
    mat4x3 pos_m = mat4x3(world_pos,world_pos,world_pos,world_pos);

    mat4x3 ambient_m = mat4x3(ambient_color,ambient_color,ambient_color,ambient_color);
    vec4 specular_exponent = vec4(spec_exponent);
    vec3 c=vec3(0.);
    vec3 ambient_acc=vec3(0.);
    for(mediump int x=0;x<total_lights;x+=4){

        mat4x3 light = mat4x3(light_positions[x].xyz,light_positions[x+1].xyz,light_positions[x+2].xyz,light_positions[x+3].xyz)-pos_m;

        mat4x3 light_c = mat4x3(light_colors[x].xyz,light_colors[x+1].xyz,light_colors[x+2].xyz,light_colors[x+3].xyz);
        vec4   light_r = vec4(light_positions[x].w,light_positions[x+1].w,light_positions[x+2].w,light_positions[x+3].w);
        vec4   light_p = vec4(light_colors[x].w,light_colors[x+1].w,light_colors[x+2].w,light_colors[x+3].w);

        vec4 l_dist = packed_length(light);
        light = packed_divide(light,l_dist);

        mat4x3 half_v = half_vector(light,view);

        vec4 NdotL = max(n*light,vec4(0.));
        vec4 NdotH = max(n*half_v,vec4(0.));
        NdotH = min(NdotL*1000.,NdotH);
        vec4 att =  attenuation_point(l_dist,light_r,light_p);


        vec3 l=blinn_phong(color.xyz,spec_color,specular_exponent,light_c,NdotL,NdotH,att);

        ambient_acc+=vec3(light_c*att);

        c+=l;

    }
    c+=ambient_color*ambient_acc;
    return c;
}

#ifdef FRAGMENT_SHADER
float ar_fog(in float fog_density){
    float z =gl_FragCoord.z / gl_FragCoord.w;
    return clamp(exp2
                 (-fog_density*fog_density*z*z  ),0.,1.);
}
#endif
