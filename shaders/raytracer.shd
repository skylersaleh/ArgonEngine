//
//  Shader.vsh
//  NeonRush
//
//  Created by Skyler Saleh on 4/23/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

uniform mediump vec4 color;



varying mediump vec2 texVarying;

#ifdef VERTEX_SHADER
attribute mediump vec2 position;
attribute mediump vec2 texture_coord;
void main()
{
   gl_Position =projection_matrix*view_matrix*matrix*vec4(position,0.0,1.);
    texVarying=texture_coord;
	
}
#endif
#ifdef FRAGMENT_SHADER
vec3 angle;
vec3 light = vec3(0.,10.,1.);
uniform mediump sampler2D texture;

vec3 repeat( vec3 p, vec3 c )
{
    return mod(p,c)-0.5*c;
}
vec4 box( vec3 p, vec3 b, vec3 material)
{
  vec3 d = abs(p) - b;
  return vec4(min(max(d.x,max(d.y,d.z)),0.0)+length(max(d,0.0)),material);
}
vec4 torus(vec3 p, vec2 t, vec3 material)
{
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return vec4(length(q)-t.y,material);
}
vec4 sphere(vec3 p, float r, vec3 material)
{
  return vec4(length(p)-r,material);
}
vec2 rotate(vec2 p, float theta){
    return vec2(cos(theta)*p.x+sin(theta)*p.y,cos(theta)*p.y-sin(theta)*p.x);
}
vec4 de(vec3 p){
    //p.xy*=vec2(cos(time),sin(time));
    p.xz = rotate(p.xz,time*0.2);

    p = repeat(p,vec3(1.));
    p.yz = rotate(p.yz,time);
    return box(p,vec3(0.1),vec3(1.));
}
vec3 get_normal(vec3 p){
    vec3 xDir= vec3(0.0001,0.,0.);
    vec3 yDir= vec3(0.,0.0001,0.);
    vec3 zDir= vec3(0.,0.,0.0001);

    return normalize(vec3(de(p+xDir).r-de(p-xDir).r,
		                de(p+yDir).r-de(p-yDir).r,
		                de(p+zDir).r-de(p-zDir).r));
}
vec3 sky(vec3 pos, vec3 dir){
    pos.xy +=dir.xy*0.01;
    vec2 p= mod(pos.xy*10.,vec2(0.5));
    return vec3(p.x+p.y);
}
vec3 
void main()
{
    float dist =0.0;
    float total_dist=0.;

    vec3 pos= vec3(texVarying-0.5,1.);
    vec3 dir =normalize(vec3(pos.xy*0.1,-1.));


    vec3 n = get_normal(pos);

    if(dist>0.01)n=vec3(0.);
    gl_FragColor = vec4(sky(pos,dir),1.);
    gl_FragColor.w=1.;

  
}
#endif
