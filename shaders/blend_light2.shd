//
//  Shader.vsh
//  NeonRush
//
//  Created by Skyler Saleh on 4/23/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

varying mediump vec2 tex_coord;
varying mediump vec3 light_color;
uniform mediump vec3 camera_pos;
uniform mediump mat4 camera_inverse;

varying mediump vec4 light_pos;
varying mediump vec2 screen_pos;

#ifdef VERTEX_SHADER
attribute mediump vec3 position;
attribute mediump vec4 center;
attribute mediump vec3 color;

void main()
{
    
    gl_Position= vec4(position,1.);
    tex_coord=position.xy*0.5+0.5;
    light_color=color;
    light_pos = center;
    screen_pos = position.xy;
    
    // Compute the light direction
    
}
#endif
#ifdef FRAGMENT_SHADER
uniform sampler2D data1;
uniform sampler2D data2;
uniform sampler2D data3;

uniform sampler2D depth;

void main()
{
    
    vec4 d1 = texture2D(data1,tex_coord);
    vec4 d2 = texture2D(data2,tex_coord);
    vec4 d3 = texture2D(data3,tex_coord);

    vec4 d_val = texture2D(depth,tex_coord);
    
    vec3 normal = normalize(d1.xyz);
    vec3 world_pos = d3.xyz;
    vec3 color = d2.xyz;
    vec3 diffuse = vec3(0.);
    vec3 view = normalize(camera_pos-world_pos);
    
    mediump vec3 dir = light_pos.xyz-world_pos;
    mediump float dis = length(dir);
    dir/=dis;
    mediump float falloff = 1.0+ dis/light_pos.w;
    mediump float att = 1./(falloff*falloff);
    mediump float NdotL = max(dot(normal,-dir),0.);
    if(NdotL*att>0.){
        
        mediump vec3 halfV = normalize(dir+view);
        float ndothv = clamp(dot(normal,halfV),0.,1.);
        diffuse+=att*light_color.xyz*(color.xyz*NdotL+pow(ndothv,10.)+0.1*color.rgb);
    }
    
    gl_FragData[0].rgb = diffuse;
    gl_FragData[0].a = 1.0;
}
#endif